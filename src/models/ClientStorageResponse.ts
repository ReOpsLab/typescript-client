/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ClientStorageResponse
 */
export interface ClientStorageResponse {
    /**
     * 
     * @type {string}
     * @memberof ClientStorageResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStorageResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStorageResponse
     */
    workspace_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientStorageResponse
     */
    provider?: ClientStorageResponseProviderEnum;
    /**
     * 
     * @type {Date}
     * @memberof ClientStorageResponse
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ClientStorageResponse
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const ClientStorageResponseProviderEnum = {
    S3: 's3',
    Ftp: 'ftp'
} as const;
export type ClientStorageResponseProviderEnum = typeof ClientStorageResponseProviderEnum[keyof typeof ClientStorageResponseProviderEnum];


/**
 * Check if a given object implements the ClientStorageResponse interface.
 */
export function instanceOfClientStorageResponse(value: object): value is ClientStorageResponse {
    return true;
}

export function ClientStorageResponseFromJSON(json: any): ClientStorageResponse {
    return ClientStorageResponseFromJSONTyped(json, false);
}

export function ClientStorageResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientStorageResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'workspace_id': json['workspace_id'] == null ? undefined : json['workspace_id'],
        'provider': json['provider'] == null ? undefined : json['provider'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function ClientStorageResponseToJSON(json: any): ClientStorageResponse {
    return ClientStorageResponseToJSONTyped(json, false);
}

export function ClientStorageResponseToJSONTyped(value?: ClientStorageResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'workspace_id': value['workspace_id'],
        'provider': value['provider'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

