/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AutoBackupListResponse,
  AutoBackupResponse,
  CreateAutoBackupJson,
  UpdateAutoBackupJson,
  WorkflowExecutionHistoryResponse,
  WorkflowExecutionListResponse,
} from '../models/index';
import {
    AutoBackupListResponseFromJSON,
    AutoBackupListResponseToJSON,
    AutoBackupResponseFromJSON,
    AutoBackupResponseToJSON,
    CreateAutoBackupJsonFromJSON,
    CreateAutoBackupJsonToJSON,
    UpdateAutoBackupJsonFromJSON,
    UpdateAutoBackupJsonToJSON,
    WorkflowExecutionHistoryResponseFromJSON,
    WorkflowExecutionHistoryResponseToJSON,
    WorkflowExecutionListResponseFromJSON,
    WorkflowExecutionListResponseToJSON,
} from '../models/index';

export interface CreateAutoBackupRequest {
    workspaceId: string;
    projectId: string;
    createAutoBackupJson: CreateAutoBackupJson;
}

export interface DeleteAutoBackupRequest {
    workspaceId: string;
    projectId: string;
    jobId: string;
}

export interface GetAutoBackupRequest {
    workspaceId: string;
    projectId: string;
    jobId: string;
}

export interface GetAutoBackupHistoryDetailsRequest {
    workspaceId: string;
    projectId: string;
    jobId: string;
    runId: string;
}

export interface ListAutoBackupRequest {
    workspaceId: string;
    projectId: string;
    page?: number;
    limit?: number;
}

export interface ListAutoBackupExecutionsRequest {
    workspaceId: string;
    projectId: string;
    jobId: string;
}

export interface UpdateAutoBackupRequest {
    workspaceId: string;
    projectId: string;
    jobId: string;
    updateAutoBackupJson: UpdateAutoBackupJson;
}

/**
 * AutomationApi - interface
 * 
 * @export
 * @interface AutomationApiInterface
 */
export interface AutomationApiInterface {
    /**
     * 
     * @summary Create automated backup
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {CreateAutoBackupJson} createAutoBackupJson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    createAutoBackupRaw(requestParameters: CreateAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupResponse>>;

    /**
     * Create automated backup
     */
    createAutoBackup(workspaceId: string, projectId: string, createAutoBackupJson: CreateAutoBackupJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupResponse>;

    /**
     * 
     * @summary Delete automated backup
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    deleteAutoBackupRaw(requestParameters: DeleteAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete automated backup
     */
    deleteAutoBackup(workspaceId: string, projectId: string, jobId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get automated backup by ID
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    getAutoBackupRaw(requestParameters: GetAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupResponse>>;

    /**
     * Get automated backup by ID
     */
    getAutoBackup(workspaceId: string, projectId: string, jobId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupResponse>;

    /**
     * 
     * @summary Get workflow execution event history details
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} jobId 
     * @param {string} runId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    getAutoBackupHistoryDetailsRaw(requestParameters: GetAutoBackupHistoryDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionHistoryResponse>>;

    /**
     * Get workflow execution event history details
     */
    getAutoBackupHistoryDetails(workspaceId: string, projectId: string, jobId: string, runId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionHistoryResponse>;

    /**
     * 
     * @summary List all automated backups
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    listAutoBackupRaw(requestParameters: ListAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupListResponse>>;

    /**
     * List all automated backups
     */
    listAutoBackup(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupListResponse>;

    /**
     * 
     * @summary List automated backup workflow executions
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    listAutoBackupExecutionsRaw(requestParameters: ListAutoBackupExecutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionListResponse>>;

    /**
     * List automated backup workflow executions
     */
    listAutoBackupExecutions(workspaceId: string, projectId: string, jobId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionListResponse>;

    /**
     * 
     * @summary Update automated backup
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} jobId 
     * @param {UpdateAutoBackupJson} updateAutoBackupJson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    updateAutoBackupRaw(requestParameters: UpdateAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupResponse>>;

    /**
     * Update automated backup
     */
    updateAutoBackup(workspaceId: string, projectId: string, jobId: string, updateAutoBackupJson: UpdateAutoBackupJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupResponse>;

}

/**
 * 
 */
export class AutomationApi extends runtime.BaseAPI implements AutomationApiInterface {

    /**
     * Create automated backup
     */
    async createAutoBackupRaw(requestParameters: CreateAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createAutoBackup().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createAutoBackup().'
            );
        }

        if (requestParameters['createAutoBackupJson'] == null) {
            throw new runtime.RequiredError(
                'createAutoBackupJson',
                'Required parameter "createAutoBackupJson" was null or undefined when calling createAutoBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/auto`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAutoBackupJsonToJSON(requestParameters['createAutoBackupJson']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoBackupResponseFromJSON(jsonValue));
    }

    /**
     * Create automated backup
     */
    async createAutoBackup(workspaceId: string, projectId: string, createAutoBackupJson: CreateAutoBackupJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupResponse> {
        const response = await this.createAutoBackupRaw({ workspaceId: workspaceId, projectId: projectId, createAutoBackupJson: createAutoBackupJson }, initOverrides);
        return await response.value();
    }

    /**
     * Delete automated backup
     */
    async deleteAutoBackupRaw(requestParameters: DeleteAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteAutoBackup().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteAutoBackup().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling deleteAutoBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/auto/{job_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete automated backup
     */
    async deleteAutoBackup(workspaceId: string, projectId: string, jobId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAutoBackupRaw({ workspaceId: workspaceId, projectId: projectId, jobId: jobId }, initOverrides);
    }

    /**
     * Get automated backup by ID
     */
    async getAutoBackupRaw(requestParameters: GetAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getAutoBackup().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getAutoBackup().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getAutoBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/auto/{job_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoBackupResponseFromJSON(jsonValue));
    }

    /**
     * Get automated backup by ID
     */
    async getAutoBackup(workspaceId: string, projectId: string, jobId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupResponse> {
        const response = await this.getAutoBackupRaw({ workspaceId: workspaceId, projectId: projectId, jobId: jobId }, initOverrides);
        return await response.value();
    }

    /**
     * Get workflow execution event history details
     */
    async getAutoBackupHistoryDetailsRaw(requestParameters: GetAutoBackupHistoryDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionHistoryResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getAutoBackupHistoryDetails().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getAutoBackupHistoryDetails().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getAutoBackupHistoryDetails().'
            );
        }

        if (requestParameters['runId'] == null) {
            throw new runtime.RequiredError(
                'runId',
                'Required parameter "runId" was null or undefined when calling getAutoBackupHistoryDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/auto/{job_id}/runs/{run_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));
        urlPath = urlPath.replace(`{${"run_id"}}`, encodeURIComponent(String(requestParameters['runId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowExecutionHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Get workflow execution event history details
     */
    async getAutoBackupHistoryDetails(workspaceId: string, projectId: string, jobId: string, runId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionHistoryResponse> {
        const response = await this.getAutoBackupHistoryDetailsRaw({ workspaceId: workspaceId, projectId: projectId, jobId: jobId, runId: runId }, initOverrides);
        return await response.value();
    }

    /**
     * List all automated backups
     */
    async listAutoBackupRaw(requestParameters: ListAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listAutoBackup().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listAutoBackup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/auto`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoBackupListResponseFromJSON(jsonValue));
    }

    /**
     * List all automated backups
     */
    async listAutoBackup(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupListResponse> {
        const response = await this.listAutoBackupRaw({ workspaceId: workspaceId, projectId: projectId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * List automated backup workflow executions
     */
    async listAutoBackupExecutionsRaw(requestParameters: ListAutoBackupExecutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listAutoBackupExecutions().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listAutoBackupExecutions().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling listAutoBackupExecutions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/auto/{job_id}/runs`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowExecutionListResponseFromJSON(jsonValue));
    }

    /**
     * List automated backup workflow executions
     */
    async listAutoBackupExecutions(workspaceId: string, projectId: string, jobId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionListResponse> {
        const response = await this.listAutoBackupExecutionsRaw({ workspaceId: workspaceId, projectId: projectId, jobId: jobId }, initOverrides);
        return await response.value();
    }

    /**
     * Update automated backup
     */
    async updateAutoBackupRaw(requestParameters: UpdateAutoBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoBackupResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateAutoBackup().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateAutoBackup().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling updateAutoBackup().'
            );
        }

        if (requestParameters['updateAutoBackupJson'] == null) {
            throw new runtime.RequiredError(
                'updateAutoBackupJson',
                'Required parameter "updateAutoBackupJson" was null or undefined when calling updateAutoBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/auto/{job_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAutoBackupJsonToJSON(requestParameters['updateAutoBackupJson']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoBackupResponseFromJSON(jsonValue));
    }

    /**
     * Update automated backup
     */
    async updateAutoBackup(workspaceId: string, projectId: string, jobId: string, updateAutoBackupJson: UpdateAutoBackupJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoBackupResponse> {
        const response = await this.updateAutoBackupRaw({ workspaceId: workspaceId, projectId: projectId, jobId: jobId, updateAutoBackupJson: updateAutoBackupJson }, initOverrides);
        return await response.value();
    }

}
