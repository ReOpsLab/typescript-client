/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientSignalResponse,
  CreateClientSignalJson,
  SignalListResponse,
  UpdateClientSignalJson,
} from '../models/index';
import {
    ClientSignalResponseFromJSON,
    ClientSignalResponseToJSON,
    CreateClientSignalJsonFromJSON,
    CreateClientSignalJsonToJSON,
    SignalListResponseFromJSON,
    SignalListResponseToJSON,
    UpdateClientSignalJsonFromJSON,
    UpdateClientSignalJsonToJSON,
} from '../models/index';

export interface CreateSignalRequest {
    workspaceId: string;
    createClientSignalJson: CreateClientSignalJson;
}

export interface DeleteSignalRequest {
    workspaceId: string;
    signalId: string;
}

export interface GetSignalRequest {
    workspaceId: string;
    signalId: string;
}

export interface ListSignalsRequest {
    workspaceId: string;
    page?: number;
    limit?: number;
}

export interface UpdateSignalRequest {
    workspaceId: string;
    signalId: string;
    updateClientSignalJson: UpdateClientSignalJson;
}

/**
 * SignalsApi - interface
 * 
 * @export
 * @interface SignalsApiInterface
 */
export interface SignalsApiInterface {
    /**
     * 
     * @summary Create signal
     * @param {string} workspaceId 
     * @param {CreateClientSignalJson} createClientSignalJson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalsApiInterface
     */
    createSignalRaw(requestParameters: CreateSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>>;

    /**
     * Create signal
     */
    createSignal(workspaceId: string, createClientSignalJson: CreateClientSignalJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse>;

    /**
     * 
     * @summary Delete signal
     * @param {string} workspaceId 
     * @param {string} signalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalsApiInterface
     */
    deleteSignalRaw(requestParameters: DeleteSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete signal
     */
    deleteSignal(workspaceId: string, signalId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get signal by ID
     * @param {string} workspaceId 
     * @param {string} signalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalsApiInterface
     */
    getSignalRaw(requestParameters: GetSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>>;

    /**
     * Get signal by ID
     */
    getSignal(workspaceId: string, signalId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse>;

    /**
     * 
     * @summary List signals
     * @param {string} workspaceId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalsApiInterface
     */
    listSignalsRaw(requestParameters: ListSignalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalListResponse>>;

    /**
     * List signals
     */
    listSignals(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalListResponse>;

    /**
     * 
     * @summary Update signal
     * @param {string} workspaceId 
     * @param {string} signalId 
     * @param {UpdateClientSignalJson} updateClientSignalJson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignalsApiInterface
     */
    updateSignalRaw(requestParameters: UpdateSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>>;

    /**
     * Update signal
     */
    updateSignal(workspaceId: string, signalId: string, updateClientSignalJson: UpdateClientSignalJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse>;

}

/**
 * 
 */
export class SignalsApi extends runtime.BaseAPI implements SignalsApiInterface {

    /**
     * Create signal
     */
    async createSignalRaw(requestParameters: CreateSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createSignal().'
            );
        }

        if (requestParameters['createClientSignalJson'] == null) {
            throw new runtime.RequiredError(
                'createClientSignalJson',
                'Required parameter "createClientSignalJson" was null or undefined when calling createSignal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/signals`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateClientSignalJsonToJSON(requestParameters['createClientSignalJson']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSignalResponseFromJSON(jsonValue));
    }

    /**
     * Create signal
     */
    async createSignal(workspaceId: string, createClientSignalJson: CreateClientSignalJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse> {
        const response = await this.createSignalRaw({ workspaceId: workspaceId, createClientSignalJson: createClientSignalJson }, initOverrides);
        return await response.value();
    }

    /**
     * Delete signal
     */
    async deleteSignalRaw(requestParameters: DeleteSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteSignal().'
            );
        }

        if (requestParameters['signalId'] == null) {
            throw new runtime.RequiredError(
                'signalId',
                'Required parameter "signalId" was null or undefined when calling deleteSignal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/signals/{signal_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"signal_id"}}`, encodeURIComponent(String(requestParameters['signalId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete signal
     */
    async deleteSignal(workspaceId: string, signalId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSignalRaw({ workspaceId: workspaceId, signalId: signalId }, initOverrides);
    }

    /**
     * Get signal by ID
     */
    async getSignalRaw(requestParameters: GetSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getSignal().'
            );
        }

        if (requestParameters['signalId'] == null) {
            throw new runtime.RequiredError(
                'signalId',
                'Required parameter "signalId" was null or undefined when calling getSignal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/signals/{signal_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"signal_id"}}`, encodeURIComponent(String(requestParameters['signalId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSignalResponseFromJSON(jsonValue));
    }

    /**
     * Get signal by ID
     */
    async getSignal(workspaceId: string, signalId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse> {
        const response = await this.getSignalRaw({ workspaceId: workspaceId, signalId: signalId }, initOverrides);
        return await response.value();
    }

    /**
     * List signals
     */
    async listSignalsRaw(requestParameters: ListSignalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listSignals().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/signals`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalListResponseFromJSON(jsonValue));
    }

    /**
     * List signals
     */
    async listSignals(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalListResponse> {
        const response = await this.listSignalsRaw({ workspaceId: workspaceId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Update signal
     */
    async updateSignalRaw(requestParameters: UpdateSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateSignal().'
            );
        }

        if (requestParameters['signalId'] == null) {
            throw new runtime.RequiredError(
                'signalId',
                'Required parameter "signalId" was null or undefined when calling updateSignal().'
            );
        }

        if (requestParameters['updateClientSignalJson'] == null) {
            throw new runtime.RequiredError(
                'updateClientSignalJson',
                'Required parameter "updateClientSignalJson" was null or undefined when calling updateSignal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/signals/{signal_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"signal_id"}}`, encodeURIComponent(String(requestParameters['signalId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClientSignalJsonToJSON(requestParameters['updateClientSignalJson']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSignalResponseFromJSON(jsonValue));
    }

    /**
     * Update signal
     */
    async updateSignal(workspaceId: string, signalId: string, updateClientSignalJson: UpdateClientSignalJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse> {
        const response = await this.updateSignalRaw({ workspaceId: workspaceId, signalId: signalId, updateClientSignalJson: updateClientSignalJson }, initOverrides);
        return await response.value();
    }

}
