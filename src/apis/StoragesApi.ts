/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientStorageResponse,
  CreateClientStorageJson,
  StorageListResponse,
  UpdateClientStorageJson,
} from '../models/index';
import {
    ClientStorageResponseFromJSON,
    ClientStorageResponseToJSON,
    CreateClientStorageJsonFromJSON,
    CreateClientStorageJsonToJSON,
    StorageListResponseFromJSON,
    StorageListResponseToJSON,
    UpdateClientStorageJsonFromJSON,
    UpdateClientStorageJsonToJSON,
} from '../models/index';

export interface CreateStorageRequest {
    workspaceId: string;
    createClientStorageJson: CreateClientStorageJson;
}

export interface DeleteStorageRequest {
    workspaceId: string;
    storageId: string;
}

export interface GetStorageRequest {
    workspaceId: string;
    storageId: string;
}

export interface ListStoragesRequest {
    workspaceId: string;
    page?: number;
    limit?: number;
}

export interface UpdateStorageRequest {
    workspaceId: string;
    storageId: string;
    updateClientStorageJson: UpdateClientStorageJson;
}

/**
 * StoragesApi - interface
 * 
 * @export
 * @interface StoragesApiInterface
 */
export interface StoragesApiInterface {
    /**
     * 
     * @summary Create storage
     * @param {string} workspaceId 
     * @param {CreateClientStorageJson} createClientStorageJson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoragesApiInterface
     */
    createStorageRaw(requestParameters: CreateStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>>;

    /**
     * Create storage
     */
    createStorage(workspaceId: string, createClientStorageJson: CreateClientStorageJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse>;

    /**
     * 
     * @summary Delete storage
     * @param {string} workspaceId 
     * @param {string} storageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoragesApiInterface
     */
    deleteStorageRaw(requestParameters: DeleteStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete storage
     */
    deleteStorage(workspaceId: string, storageId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get storage by ID
     * @param {string} workspaceId 
     * @param {string} storageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoragesApiInterface
     */
    getStorageRaw(requestParameters: GetStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>>;

    /**
     * Get storage by ID
     */
    getStorage(workspaceId: string, storageId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse>;

    /**
     * 
     * @summary List storages
     * @param {string} workspaceId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoragesApiInterface
     */
    listStoragesRaw(requestParameters: ListStoragesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageListResponse>>;

    /**
     * List storages
     */
    listStorages(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageListResponse>;

    /**
     * 
     * @summary Update storage
     * @param {string} workspaceId 
     * @param {string} storageId 
     * @param {UpdateClientStorageJson} updateClientStorageJson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoragesApiInterface
     */
    updateStorageRaw(requestParameters: UpdateStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>>;

    /**
     * Update storage
     */
    updateStorage(workspaceId: string, storageId: string, updateClientStorageJson: UpdateClientStorageJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse>;

}

/**
 * 
 */
export class StoragesApi extends runtime.BaseAPI implements StoragesApiInterface {

    /**
     * Create storage
     */
    async createStorageRaw(requestParameters: CreateStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createStorage().'
            );
        }

        if (requestParameters['createClientStorageJson'] == null) {
            throw new runtime.RequiredError(
                'createClientStorageJson',
                'Required parameter "createClientStorageJson" was null or undefined when calling createStorage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/storages`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateClientStorageJsonToJSON(requestParameters['createClientStorageJson']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientStorageResponseFromJSON(jsonValue));
    }

    /**
     * Create storage
     */
    async createStorage(workspaceId: string, createClientStorageJson: CreateClientStorageJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse> {
        const response = await this.createStorageRaw({ workspaceId: workspaceId, createClientStorageJson: createClientStorageJson }, initOverrides);
        return await response.value();
    }

    /**
     * Delete storage
     */
    async deleteStorageRaw(requestParameters: DeleteStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteStorage().'
            );
        }

        if (requestParameters['storageId'] == null) {
            throw new runtime.RequiredError(
                'storageId',
                'Required parameter "storageId" was null or undefined when calling deleteStorage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/storages/{storage_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"storage_id"}}`, encodeURIComponent(String(requestParameters['storageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete storage
     */
    async deleteStorage(workspaceId: string, storageId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStorageRaw({ workspaceId: workspaceId, storageId: storageId }, initOverrides);
    }

    /**
     * Get storage by ID
     */
    async getStorageRaw(requestParameters: GetStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getStorage().'
            );
        }

        if (requestParameters['storageId'] == null) {
            throw new runtime.RequiredError(
                'storageId',
                'Required parameter "storageId" was null or undefined when calling getStorage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/storages/{storage_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"storage_id"}}`, encodeURIComponent(String(requestParameters['storageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientStorageResponseFromJSON(jsonValue));
    }

    /**
     * Get storage by ID
     */
    async getStorage(workspaceId: string, storageId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse> {
        const response = await this.getStorageRaw({ workspaceId: workspaceId, storageId: storageId }, initOverrides);
        return await response.value();
    }

    /**
     * List storages
     */
    async listStoragesRaw(requestParameters: ListStoragesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listStorages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/storages`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageListResponseFromJSON(jsonValue));
    }

    /**
     * List storages
     */
    async listStorages(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageListResponse> {
        const response = await this.listStoragesRaw({ workspaceId: workspaceId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Update storage
     */
    async updateStorageRaw(requestParameters: UpdateStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateStorage().'
            );
        }

        if (requestParameters['storageId'] == null) {
            throw new runtime.RequiredError(
                'storageId',
                'Required parameter "storageId" was null or undefined when calling updateStorage().'
            );
        }

        if (requestParameters['updateClientStorageJson'] == null) {
            throw new runtime.RequiredError(
                'updateClientStorageJson',
                'Required parameter "updateClientStorageJson" was null or undefined when calling updateStorage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/storages/{storage_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"storage_id"}}`, encodeURIComponent(String(requestParameters['storageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClientStorageJsonToJSON(requestParameters['updateClientStorageJson']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientStorageResponseFromJSON(jsonValue));
    }

    /**
     * Update storage
     */
    async updateStorage(workspaceId: string, storageId: string, updateClientStorageJson: UpdateClientStorageJson, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse> {
        const response = await this.updateStorageRaw({ workspaceId: workspaceId, storageId: storageId, updateClientStorageJson: updateClientStorageJson }, initOverrides);
        return await response.value();
    }

}
