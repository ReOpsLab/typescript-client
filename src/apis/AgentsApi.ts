/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentListResponse,
  ClientAgentResponse,
  CreateClientAgent,
  UpdateClientAgent,
} from '../models/index';
import {
    AgentListResponseFromJSON,
    AgentListResponseToJSON,
    ClientAgentResponseFromJSON,
    ClientAgentResponseToJSON,
    CreateClientAgentFromJSON,
    CreateClientAgentToJSON,
    UpdateClientAgentFromJSON,
    UpdateClientAgentToJSON,
} from '../models/index';

export interface CreateAgentRequest {
    workspaceId: string;
    createClientAgent: CreateClientAgent;
}

export interface DeleteAgentRequest {
    workspaceId: string;
    id: string;
}

export interface GetAgentRequest {
    workspaceId: string;
    id: string;
}

export interface ListAgentsRequest {
    workspaceId: string;
    page?: number;
    limit?: number;
}

export interface UpdateAgentRequest {
    workspaceId: string;
    id: string;
    updateClientAgent: UpdateClientAgent;
}

/**
 * AgentsApi - interface
 * 
 * @export
 * @interface AgentsApiInterface
 */
export interface AgentsApiInterface {
    /**
     * 
     * @summary Create agent
     * @param {string} workspaceId 
     * @param {CreateClientAgent} createClientAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    createAgentRaw(requestParameters: CreateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientAgentResponse>>;

    /**
     * Create agent
     */
    createAgent(workspaceId: string, createClientAgent: CreateClientAgent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientAgentResponse>;

    /**
     * 
     * @summary Delete agent
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    deleteAgentRaw(requestParameters: DeleteAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete agent
     */
    deleteAgent(workspaceId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get agent by ID
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentRaw(requestParameters: GetAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientAgentResponse>>;

    /**
     * Get agent by ID
     */
    getAgent(workspaceId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientAgentResponse>;

    /**
     * 
     * @summary List agents
     * @param {string} workspaceId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    listAgentsRaw(requestParameters: ListAgentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>>;

    /**
     * List agents
     */
    listAgents(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse>;

    /**
     * 
     * @summary Update agent
     * @param {string} workspaceId 
     * @param {string} id 
     * @param {UpdateClientAgent} updateClientAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    updateAgentRaw(requestParameters: UpdateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientAgentResponse>>;

    /**
     * Update agent
     */
    updateAgent(workspaceId: string, id: string, updateClientAgent: UpdateClientAgent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientAgentResponse>;

}

/**
 * 
 */
export class AgentsApi extends runtime.BaseAPI implements AgentsApiInterface {

    /**
     * Create agent
     */
    async createAgentRaw(requestParameters: CreateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientAgentResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createAgent().'
            );
        }

        if (requestParameters['createClientAgent'] == null) {
            throw new runtime.RequiredError(
                'createClientAgent',
                'Required parameter "createClientAgent" was null or undefined when calling createAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/agents`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateClientAgentToJSON(requestParameters['createClientAgent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientAgentResponseFromJSON(jsonValue));
    }

    /**
     * Create agent
     */
    async createAgent(workspaceId: string, createClientAgent: CreateClientAgent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientAgentResponse> {
        const response = await this.createAgentRaw({ workspaceId: workspaceId, createClientAgent: createClientAgent }, initOverrides);
        return await response.value();
    }

    /**
     * Delete agent
     */
    async deleteAgentRaw(requestParameters: DeleteAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteAgent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/agents/{id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete agent
     */
    async deleteAgent(workspaceId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAgentRaw({ workspaceId: workspaceId, id: id }, initOverrides);
    }

    /**
     * Get agent by ID
     */
    async getAgentRaw(requestParameters: GetAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientAgentResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getAgent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/agents/{id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientAgentResponseFromJSON(jsonValue));
    }

    /**
     * Get agent by ID
     */
    async getAgent(workspaceId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientAgentResponse> {
        const response = await this.getAgentRaw({ workspaceId: workspaceId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * List agents
     */
    async listAgentsRaw(requestParameters: ListAgentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listAgents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/agents`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentListResponseFromJSON(jsonValue));
    }

    /**
     * List agents
     */
    async listAgents(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse> {
        const response = await this.listAgentsRaw({ workspaceId: workspaceId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Update agent
     */
    async updateAgentRaw(requestParameters: UpdateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientAgentResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateAgent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAgent().'
            );
        }

        if (requestParameters['updateClientAgent'] == null) {
            throw new runtime.RequiredError(
                'updateClientAgent',
                'Required parameter "updateClientAgent" was null or undefined when calling updateAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/agents/{id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClientAgentToJSON(requestParameters['updateClientAgent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientAgentResponseFromJSON(jsonValue));
    }

    /**
     * Update agent
     */
    async updateAgent(workspaceId: string, id: string, updateClientAgent: UpdateClientAgent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientAgentResponse> {
        const response = await this.updateAgentRaw({ workspaceId: workspaceId, id: id, updateClientAgent: updateClientAgent }, initOverrides);
        return await response.value();
    }

}
