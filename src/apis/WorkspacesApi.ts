/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWorkspace,
  UpdateWorkspace,
  WorkspaceListResponse,
  WorkspaceResponse,
} from '../models/index';
import {
    CreateWorkspaceFromJSON,
    CreateWorkspaceToJSON,
    UpdateWorkspaceFromJSON,
    UpdateWorkspaceToJSON,
    WorkspaceListResponseFromJSON,
    WorkspaceListResponseToJSON,
    WorkspaceResponseFromJSON,
    WorkspaceResponseToJSON,
} from '../models/index';

export interface CreateWorkspaceRequest {
    createWorkspace: CreateWorkspace;
}

export interface DeleteWorkspaceRequest {
    workspaceId: string;
}

export interface GetWorkspaceRequest {
    workspaceId: string;
}

export interface ListWorkspacesRequest {
    page?: number;
    limit?: number;
}

export interface UpdateWorkspaceRequest {
    workspaceId: string;
    updateWorkspace: UpdateWorkspace;
}

/**
 * WorkspacesApi - interface
 * 
 * @export
 * @interface WorkspacesApiInterface
 */
export interface WorkspacesApiInterface {
    /**
     * 
     * @summary Create workspace
     * @param {CreateWorkspace} createWorkspace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiInterface
     */
    createWorkspaceRaw(requestParameters: CreateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>>;

    /**
     * Create workspace
     */
    createWorkspace(createWorkspace: CreateWorkspace, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse>;

    /**
     * 
     * @summary Delete workspace
     * @param {string} workspaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiInterface
     */
    deleteWorkspaceRaw(requestParameters: DeleteWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete workspace
     */
    deleteWorkspace(workspaceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get workspace by ID
     * @param {string} workspaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiInterface
     */
    getWorkspaceRaw(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>>;

    /**
     * Get workspace by ID
     */
    getWorkspace(workspaceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse>;

    /**
     * 
     * @summary List workspaces
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiInterface
     */
    listWorkspacesRaw(requestParameters: ListWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceListResponse>>;

    /**
     * List workspaces
     */
    listWorkspaces(page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceListResponse>;

    /**
     * 
     * @summary Update workspace
     * @param {string} workspaceId 
     * @param {UpdateWorkspace} updateWorkspace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiInterface
     */
    updateWorkspaceRaw(requestParameters: UpdateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>>;

    /**
     * Update workspace
     */
    updateWorkspace(workspaceId: string, updateWorkspace: UpdateWorkspace, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse>;

}

/**
 * 
 */
export class WorkspacesApi extends runtime.BaseAPI implements WorkspacesApiInterface {

    /**
     * Create workspace
     */
    async createWorkspaceRaw(requestParameters: CreateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>> {
        if (requestParameters['createWorkspace'] == null) {
            throw new runtime.RequiredError(
                'createWorkspace',
                'Required parameter "createWorkspace" was null or undefined when calling createWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkspaceToJSON(requestParameters['createWorkspace']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Create workspace
     */
    async createWorkspace(createWorkspace: CreateWorkspace, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse> {
        const response = await this.createWorkspaceRaw({ createWorkspace: createWorkspace }, initOverrides);
        return await response.value();
    }

    /**
     * Delete workspace
     */
    async deleteWorkspaceRaw(requestParameters: DeleteWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete workspace
     */
    async deleteWorkspace(workspaceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkspaceRaw({ workspaceId: workspaceId }, initOverrides);
    }

    /**
     * Get workspace by ID
     */
    async getWorkspaceRaw(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Get workspace by ID
     */
    async getWorkspace(workspaceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse> {
        const response = await this.getWorkspaceRaw({ workspaceId: workspaceId }, initOverrides);
        return await response.value();
    }

    /**
     * List workspaces
     */
    async listWorkspacesRaw(requestParameters: ListWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceListResponseFromJSON(jsonValue));
    }

    /**
     * List workspaces
     */
    async listWorkspaces(page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceListResponse> {
        const response = await this.listWorkspacesRaw({ page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Update workspace
     */
    async updateWorkspaceRaw(requestParameters: UpdateWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateWorkspace().'
            );
        }

        if (requestParameters['updateWorkspace'] == null) {
            throw new runtime.RequiredError(
                'updateWorkspace',
                'Required parameter "updateWorkspace" was null or undefined when calling updateWorkspace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspaceToJSON(requestParameters['updateWorkspace']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Update workspace
     */
    async updateWorkspace(workspaceId: string, updateWorkspace: UpdateWorkspace, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceResponse> {
        const response = await this.updateWorkspaceRaw({ workspaceId: workspaceId, updateWorkspace: updateWorkspace }, initOverrides);
        return await response.value();
    }

}
