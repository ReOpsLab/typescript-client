/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientEncryptionKeyResponse,
  CreateClientEncryptionKey,
  KeyListResponse,
  UpdateClientEncryptionKey,
} from '../models/index';
import {
    ClientEncryptionKeyResponseFromJSON,
    ClientEncryptionKeyResponseToJSON,
    CreateClientEncryptionKeyFromJSON,
    CreateClientEncryptionKeyToJSON,
    KeyListResponseFromJSON,
    KeyListResponseToJSON,
    UpdateClientEncryptionKeyFromJSON,
    UpdateClientEncryptionKeyToJSON,
} from '../models/index';

export interface CreateKeyRequest {
    workspaceId: string;
    createClientEncryptionKey: CreateClientEncryptionKey;
}

export interface DeleteKeyRequest {
    workspaceId: string;
    keyId: string;
}

export interface GetKeyRequest {
    workspaceId: string;
    keyId: string;
}

export interface ListKeysRequest {
    workspaceId: string;
    page?: number;
    limit?: number;
}

export interface UpdateKeyRequest {
    workspaceId: string;
    keyId: string;
    updateClientEncryptionKey: UpdateClientEncryptionKey;
}

/**
 * KeysApi - interface
 * 
 * @export
 * @interface KeysApiInterface
 */
export interface KeysApiInterface {
    /**
     * 
     * @summary Create encryption key
     * @param {string} workspaceId 
     * @param {CreateClientEncryptionKey} createClientEncryptionKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeysApiInterface
     */
    createKeyRaw(requestParameters: CreateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>>;

    /**
     * Create encryption key
     */
    createKey(workspaceId: string, createClientEncryptionKey: CreateClientEncryptionKey, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse>;

    /**
     * 
     * @summary Delete encryption key
     * @param {string} workspaceId 
     * @param {string} keyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeysApiInterface
     */
    deleteKeyRaw(requestParameters: DeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete encryption key
     */
    deleteKey(workspaceId: string, keyId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get encryption key by ID
     * @param {string} workspaceId 
     * @param {string} keyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeysApiInterface
     */
    getKeyRaw(requestParameters: GetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>>;

    /**
     * Get encryption key by ID
     */
    getKey(workspaceId: string, keyId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse>;

    /**
     * 
     * @summary List encryption keys
     * @param {string} workspaceId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeysApiInterface
     */
    listKeysRaw(requestParameters: ListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyListResponse>>;

    /**
     * List encryption keys
     */
    listKeys(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyListResponse>;

    /**
     * 
     * @summary Update encryption key
     * @param {string} workspaceId 
     * @param {string} keyId 
     * @param {UpdateClientEncryptionKey} updateClientEncryptionKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeysApiInterface
     */
    updateKeyRaw(requestParameters: UpdateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>>;

    /**
     * Update encryption key
     */
    updateKey(workspaceId: string, keyId: string, updateClientEncryptionKey: UpdateClientEncryptionKey, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse>;

}

/**
 * 
 */
export class KeysApi extends runtime.BaseAPI implements KeysApiInterface {

    /**
     * Create encryption key
     */
    async createKeyRaw(requestParameters: CreateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createKey().'
            );
        }

        if (requestParameters['createClientEncryptionKey'] == null) {
            throw new runtime.RequiredError(
                'createClientEncryptionKey',
                'Required parameter "createClientEncryptionKey" was null or undefined when calling createKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/keys`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateClientEncryptionKeyToJSON(requestParameters['createClientEncryptionKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientEncryptionKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create encryption key
     */
    async createKey(workspaceId: string, createClientEncryptionKey: CreateClientEncryptionKey, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse> {
        const response = await this.createKeyRaw({ workspaceId: workspaceId, createClientEncryptionKey: createClientEncryptionKey }, initOverrides);
        return await response.value();
    }

    /**
     * Delete encryption key
     */
    async deleteKeyRaw(requestParameters: DeleteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteKey().'
            );
        }

        if (requestParameters['keyId'] == null) {
            throw new runtime.RequiredError(
                'keyId',
                'Required parameter "keyId" was null or undefined when calling deleteKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/keys/{key_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete encryption key
     */
    async deleteKey(workspaceId: string, keyId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteKeyRaw({ workspaceId: workspaceId, keyId: keyId }, initOverrides);
    }

    /**
     * Get encryption key by ID
     */
    async getKeyRaw(requestParameters: GetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getKey().'
            );
        }

        if (requestParameters['keyId'] == null) {
            throw new runtime.RequiredError(
                'keyId',
                'Required parameter "keyId" was null or undefined when calling getKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/keys/{key_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientEncryptionKeyResponseFromJSON(jsonValue));
    }

    /**
     * Get encryption key by ID
     */
    async getKey(workspaceId: string, keyId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse> {
        const response = await this.getKeyRaw({ workspaceId: workspaceId, keyId: keyId }, initOverrides);
        return await response.value();
    }

    /**
     * List encryption keys
     */
    async listKeysRaw(requestParameters: ListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/keys`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyListResponseFromJSON(jsonValue));
    }

    /**
     * List encryption keys
     */
    async listKeys(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyListResponse> {
        const response = await this.listKeysRaw({ workspaceId: workspaceId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Update encryption key
     */
    async updateKeyRaw(requestParameters: UpdateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateKey().'
            );
        }

        if (requestParameters['keyId'] == null) {
            throw new runtime.RequiredError(
                'keyId',
                'Required parameter "keyId" was null or undefined when calling updateKey().'
            );
        }

        if (requestParameters['updateClientEncryptionKey'] == null) {
            throw new runtime.RequiredError(
                'updateClientEncryptionKey',
                'Required parameter "updateClientEncryptionKey" was null or undefined when calling updateKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/keys/{key_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters['keyId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClientEncryptionKeyToJSON(requestParameters['updateClientEncryptionKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientEncryptionKeyResponseFromJSON(jsonValue));
    }

    /**
     * Update encryption key
     */
    async updateKey(workspaceId: string, keyId: string, updateClientEncryptionKey: UpdateClientEncryptionKey, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse> {
        const response = await this.updateKeyRaw({ workspaceId: workspaceId, keyId: keyId, updateClientEncryptionKey: updateClientEncryptionKey }, initOverrides);
        return await response.value();
    }

}
