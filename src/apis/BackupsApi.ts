/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BackupListResponse,
  BackupResponse,
  ConfirmBackupUploaded,
  ConfirmBackupUploadedResponse,
  CreateBackup,
} from '../models/index';
import {
    BackupListResponseFromJSON,
    BackupListResponseToJSON,
    BackupResponseFromJSON,
    BackupResponseToJSON,
    ConfirmBackupUploadedFromJSON,
    ConfirmBackupUploadedToJSON,
    ConfirmBackupUploadedResponseFromJSON,
    ConfirmBackupUploadedResponseToJSON,
    CreateBackupFromJSON,
    CreateBackupToJSON,
} from '../models/index';

export interface ConfirmBackupUploadedRequest {
    workspaceId: string;
    projectId: string;
    backupId: string;
    confirmBackupUploaded: ConfirmBackupUploaded;
}

export interface CreateBackupRequest {
    workspaceId: string;
    projectId: string;
    createBackup: CreateBackup;
}

export interface GetBackupRequest {
    workspaceId: string;
    projectId: string;
    backupId: string;
}

export interface ListBackupsRequest {
    workspaceId: string;
    projectId: string;
    page?: number;
    limit?: number;
}

export interface RequestBackupCopyRequest {
    workspaceId: string;
    projectId: string;
    backupId: string;
}

/**
 * BackupsApi - interface
 * 
 * @export
 * @interface BackupsApiInterface
 */
export interface BackupsApiInterface {
    /**
     * 
     * @summary Confirm backup uploaded
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} backupId 
     * @param {ConfirmBackupUploaded} confirmBackupUploaded 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    confirmBackupUploadedRaw(requestParameters: ConfirmBackupUploadedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfirmBackupUploadedResponse>>;

    /**
     * Confirm backup uploaded
     */
    confirmBackupUploaded(workspaceId: string, projectId: string, backupId: string, confirmBackupUploaded: ConfirmBackupUploaded, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfirmBackupUploadedResponse>;

    /**
     * 
     * @summary Create backup (request upload)
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {CreateBackup} createBackup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    createBackupRaw(requestParameters: CreateBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupResponse>>;

    /**
     * Create backup (request upload)
     */
    createBackup(workspaceId: string, projectId: string, createBackup: CreateBackup, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupResponse>;

    /**
     * 
     * @summary Get backup by ID
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} backupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    getBackupRaw(requestParameters: GetBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupResponse>>;

    /**
     * Get backup by ID
     */
    getBackup(workspaceId: string, projectId: string, backupId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupResponse>;

    /**
     * 
     * @summary List backups
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    listBackupsRaw(requestParameters: ListBackupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupListResponse>>;

    /**
     * List backups
     */
    listBackups(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupListResponse>;

    /**
     * 
     * @summary Request backup copy for download
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} backupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    requestBackupCopyRaw(requestParameters: RequestBackupCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Request backup copy for download
     */
    requestBackupCopy(workspaceId: string, projectId: string, backupId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class BackupsApi extends runtime.BaseAPI implements BackupsApiInterface {

    /**
     * Confirm backup uploaded
     */
    async confirmBackupUploadedRaw(requestParameters: ConfirmBackupUploadedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfirmBackupUploadedResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling confirmBackupUploaded().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling confirmBackupUploaded().'
            );
        }

        if (requestParameters['backupId'] == null) {
            throw new runtime.RequiredError(
                'backupId',
                'Required parameter "backupId" was null or undefined when calling confirmBackupUploaded().'
            );
        }

        if (requestParameters['confirmBackupUploaded'] == null) {
            throw new runtime.RequiredError(
                'confirmBackupUploaded',
                'Required parameter "confirmBackupUploaded" was null or undefined when calling confirmBackupUploaded().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/backups/{backup_id}/confirm`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"backup_id"}}`, encodeURIComponent(String(requestParameters['backupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmBackupUploadedToJSON(requestParameters['confirmBackupUploaded']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfirmBackupUploadedResponseFromJSON(jsonValue));
    }

    /**
     * Confirm backup uploaded
     */
    async confirmBackupUploaded(workspaceId: string, projectId: string, backupId: string, confirmBackupUploaded: ConfirmBackupUploaded, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfirmBackupUploadedResponse> {
        const response = await this.confirmBackupUploadedRaw({ workspaceId: workspaceId, projectId: projectId, backupId: backupId, confirmBackupUploaded: confirmBackupUploaded }, initOverrides);
        return await response.value();
    }

    /**
     * Create backup (request upload)
     */
    async createBackupRaw(requestParameters: CreateBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createBackup().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createBackup().'
            );
        }

        if (requestParameters['createBackup'] == null) {
            throw new runtime.RequiredError(
                'createBackup',
                'Required parameter "createBackup" was null or undefined when calling createBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/backups`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBackupToJSON(requestParameters['createBackup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupResponseFromJSON(jsonValue));
    }

    /**
     * Create backup (request upload)
     */
    async createBackup(workspaceId: string, projectId: string, createBackup: CreateBackup, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupResponse> {
        const response = await this.createBackupRaw({ workspaceId: workspaceId, projectId: projectId, createBackup: createBackup }, initOverrides);
        return await response.value();
    }

    /**
     * Get backup by ID
     */
    async getBackupRaw(requestParameters: GetBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getBackup().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getBackup().'
            );
        }

        if (requestParameters['backupId'] == null) {
            throw new runtime.RequiredError(
                'backupId',
                'Required parameter "backupId" was null or undefined when calling getBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/backups/{backup_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"backup_id"}}`, encodeURIComponent(String(requestParameters['backupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupResponseFromJSON(jsonValue));
    }

    /**
     * Get backup by ID
     */
    async getBackup(workspaceId: string, projectId: string, backupId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupResponse> {
        const response = await this.getBackupRaw({ workspaceId: workspaceId, projectId: projectId, backupId: backupId }, initOverrides);
        return await response.value();
    }

    /**
     * List backups
     */
    async listBackupsRaw(requestParameters: ListBackupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listBackups().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listBackups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/backups`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupListResponseFromJSON(jsonValue));
    }

    /**
     * List backups
     */
    async listBackups(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupListResponse> {
        const response = await this.listBackupsRaw({ workspaceId: workspaceId, projectId: projectId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Request backup copy for download
     */
    async requestBackupCopyRaw(requestParameters: RequestBackupCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling requestBackupCopy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling requestBackupCopy().'
            );
        }

        if (requestParameters['backupId'] == null) {
            throw new runtime.RequiredError(
                'backupId',
                'Required parameter "backupId" was null or undefined when calling requestBackupCopy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/backups/{backup_id}/download`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"backup_id"}}`, encodeURIComponent(String(requestParameters['backupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request backup copy for download
     */
    async requestBackupCopy(workspaceId: string, projectId: string, backupId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.requestBackupCopyRaw({ workspaceId: workspaceId, projectId: projectId, backupId: backupId }, initOverrides);
    }

}
