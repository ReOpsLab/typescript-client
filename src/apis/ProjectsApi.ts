/* tslint:disable */
/* eslint-disable */
/**
 * BackedUp API
 * Microservices-based backup and vault management platform with encrypted backups and distributed storage
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddProjectClientSignal,
  AddProjectStorageRequest,
  ClientEncryptionKeyResponse,
  ClientSignalResponse,
  ClientStorageResponse,
  CreateProject,
  ProjectListResponse,
  ProjectResponse,
  SetProjectEncryptionKey,
  SignalListResponse,
  StorageListResponse,
  UpdateProject,
} from '../models/index';
import {
    AddProjectClientSignalFromJSON,
    AddProjectClientSignalToJSON,
    AddProjectStorageRequestFromJSON,
    AddProjectStorageRequestToJSON,
    ClientEncryptionKeyResponseFromJSON,
    ClientEncryptionKeyResponseToJSON,
    ClientSignalResponseFromJSON,
    ClientSignalResponseToJSON,
    ClientStorageResponseFromJSON,
    ClientStorageResponseToJSON,
    CreateProjectFromJSON,
    CreateProjectToJSON,
    ProjectListResponseFromJSON,
    ProjectListResponseToJSON,
    ProjectResponseFromJSON,
    ProjectResponseToJSON,
    SetProjectEncryptionKeyFromJSON,
    SetProjectEncryptionKeyToJSON,
    SignalListResponseFromJSON,
    SignalListResponseToJSON,
    StorageListResponseFromJSON,
    StorageListResponseToJSON,
    UpdateProjectFromJSON,
    UpdateProjectToJSON,
} from '../models/index';

export interface AddProjectSignalRequest {
    workspaceId: string;
    projectId: string;
    addProjectClientSignal: AddProjectClientSignal;
}

export interface AddProjectStorageOperationRequest {
    workspaceId: string;
    projectId: string;
    addProjectStorageRequest: AddProjectStorageRequest;
}

export interface CreateProjectRequest {
    workspaceId: string;
    createProject: CreateProject;
}

export interface DeleteProjectRequest {
    workspaceId: string;
    projectId: string;
}

export interface DeleteProjectKeyRequest {
    workspaceId: string;
    projectId: string;
}

export interface DeleteProjectSignalRequest {
    workspaceId: string;
    projectId: string;
    signalId: string;
}

export interface DeleteProjectStorageRequest {
    workspaceId: string;
    projectId: string;
    storageId: string;
}

export interface GetProjectRequest {
    workspaceId: string;
    projectId: string;
}

export interface GetProjectKeyRequest {
    workspaceId: string;
    projectId: string;
}

export interface ListProjectSignalsRequest {
    workspaceId: string;
    projectId: string;
    page?: number;
    limit?: number;
}

export interface ListProjectStoragesRequest {
    workspaceId: string;
    projectId: string;
    page?: number;
    limit?: number;
}

export interface ListProjectsRequest {
    workspaceId: string;
    page?: number;
    limit?: number;
}

export interface SetProjectKeyRequest {
    workspaceId: string;
    projectId: string;
    setProjectEncryptionKey: SetProjectEncryptionKey;
}

export interface UpdateProjectRequest {
    workspaceId: string;
    projectId: string;
    updateProject: UpdateProject;
}

/**
 * ProjectsApi - interface
 * 
 * @export
 * @interface ProjectsApiInterface
 */
export interface ProjectsApiInterface {
    /**
     * 
     * @summary Add signal to vault
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {AddProjectClientSignal} addProjectClientSignal 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    addProjectSignalRaw(requestParameters: AddProjectSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>>;

    /**
     * Add signal to vault
     */
    addProjectSignal(workspaceId: string, projectId: string, addProjectClientSignal: AddProjectClientSignal, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse>;

    /**
     * 
     * @summary Add storage to vault
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {AddProjectStorageRequest} addProjectStorageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    addProjectStorageRaw(requestParameters: AddProjectStorageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>>;

    /**
     * Add storage to vault
     */
    addProjectStorage(workspaceId: string, projectId: string, addProjectStorageRequest: AddProjectStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse>;

    /**
     * 
     * @summary Create vault
     * @param {string} workspaceId 
     * @param {CreateProject} createProject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     * Create vault
     */
    createProject(workspaceId: string, createProject: CreateProject, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

    /**
     * 
     * @summary Delete vault
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete vault
     */
    deleteProject(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete vault encryption key
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteProjectKeyRaw(requestParameters: DeleteProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete vault encryption key
     */
    deleteProjectKey(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove signal from vault
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} signalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteProjectSignalRaw(requestParameters: DeleteProjectSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove signal from vault
     */
    deleteProjectSignal(workspaceId: string, projectId: string, signalId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove storage from vault
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {string} storageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteProjectStorageRaw(requestParameters: DeleteProjectStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove storage from vault
     */
    deleteProjectStorage(workspaceId: string, projectId: string, storageId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get vault by ID
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     * Get vault by ID
     */
    getProject(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

    /**
     * 
     * @summary Get vault encryption key
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectKeyRaw(requestParameters: GetProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>>;

    /**
     * Get vault encryption key
     */
    getProjectKey(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse | null | undefined >;

    /**
     * 
     * @summary List vault signals
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    listProjectSignalsRaw(requestParameters: ListProjectSignalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalListResponse>>;

    /**
     * List vault signals
     */
    listProjectSignals(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalListResponse>;

    /**
     * 
     * @summary List vault storages
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    listProjectStoragesRaw(requestParameters: ListProjectStoragesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageListResponse>>;

    /**
     * List vault storages
     */
    listProjectStorages(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageListResponse>;

    /**
     * 
     * @summary List vaults
     * @param {string} workspaceId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectListResponse>>;

    /**
     * List vaults
     */
    listProjects(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectListResponse>;

    /**
     * 
     * @summary Set vault encryption key
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {SetProjectEncryptionKey} setProjectEncryptionKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    setProjectKeyRaw(requestParameters: SetProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>>;

    /**
     * Set vault encryption key
     */
    setProjectKey(workspaceId: string, projectId: string, setProjectEncryptionKey: SetProjectEncryptionKey, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse>;

    /**
     * 
     * @summary Update vault
     * @param {string} workspaceId 
     * @param {string} projectId 
     * @param {UpdateProject} updateProject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     * Update vault
     */
    updateProject(workspaceId: string, projectId: string, updateProject: UpdateProject, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI implements ProjectsApiInterface {

    /**
     * Add signal to vault
     */
    async addProjectSignalRaw(requestParameters: AddProjectSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSignalResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling addProjectSignal().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling addProjectSignal().'
            );
        }

        if (requestParameters['addProjectClientSignal'] == null) {
            throw new runtime.RequiredError(
                'addProjectClientSignal',
                'Required parameter "addProjectClientSignal" was null or undefined when calling addProjectSignal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/signals`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProjectClientSignalToJSON(requestParameters['addProjectClientSignal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSignalResponseFromJSON(jsonValue));
    }

    /**
     * Add signal to vault
     */
    async addProjectSignal(workspaceId: string, projectId: string, addProjectClientSignal: AddProjectClientSignal, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSignalResponse> {
        const response = await this.addProjectSignalRaw({ workspaceId: workspaceId, projectId: projectId, addProjectClientSignal: addProjectClientSignal }, initOverrides);
        return await response.value();
    }

    /**
     * Add storage to vault
     */
    async addProjectStorageRaw(requestParameters: AddProjectStorageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientStorageResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling addProjectStorage().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling addProjectStorage().'
            );
        }

        if (requestParameters['addProjectStorageRequest'] == null) {
            throw new runtime.RequiredError(
                'addProjectStorageRequest',
                'Required parameter "addProjectStorageRequest" was null or undefined when calling addProjectStorage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/storages`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProjectStorageRequestToJSON(requestParameters['addProjectStorageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientStorageResponseFromJSON(jsonValue));
    }

    /**
     * Add storage to vault
     */
    async addProjectStorage(workspaceId: string, projectId: string, addProjectStorageRequest: AddProjectStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientStorageResponse> {
        const response = await this.addProjectStorageRaw({ workspaceId: workspaceId, projectId: projectId, addProjectStorageRequest: addProjectStorageRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create vault
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling createProject().'
            );
        }

        if (requestParameters['createProject'] == null) {
            throw new runtime.RequiredError(
                'createProject',
                'Required parameter "createProject" was null or undefined when calling createProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectToJSON(requestParameters['createProject']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Create vault
     */
    async createProject(workspaceId: string, createProject: CreateProject, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.createProjectRaw({ workspaceId: workspaceId, createProject: createProject }, initOverrides);
        return await response.value();
    }

    /**
     * Delete vault
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteProject().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete vault
     */
    async deleteProject(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectRaw({ workspaceId: workspaceId, projectId: projectId }, initOverrides);
    }

    /**
     * Delete vault encryption key
     */
    async deleteProjectKeyRaw(requestParameters: DeleteProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteProjectKey().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/key`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete vault encryption key
     */
    async deleteProjectKey(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectKeyRaw({ workspaceId: workspaceId, projectId: projectId }, initOverrides);
    }

    /**
     * Remove signal from vault
     */
    async deleteProjectSignalRaw(requestParameters: DeleteProjectSignalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteProjectSignal().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectSignal().'
            );
        }

        if (requestParameters['signalId'] == null) {
            throw new runtime.RequiredError(
                'signalId',
                'Required parameter "signalId" was null or undefined when calling deleteProjectSignal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/signals/{signal_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"signal_id"}}`, encodeURIComponent(String(requestParameters['signalId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove signal from vault
     */
    async deleteProjectSignal(workspaceId: string, projectId: string, signalId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectSignalRaw({ workspaceId: workspaceId, projectId: projectId, signalId: signalId }, initOverrides);
    }

    /**
     * Remove storage from vault
     */
    async deleteProjectStorageRaw(requestParameters: DeleteProjectStorageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteProjectStorage().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectStorage().'
            );
        }

        if (requestParameters['storageId'] == null) {
            throw new runtime.RequiredError(
                'storageId',
                'Required parameter "storageId" was null or undefined when calling deleteProjectStorage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/storages/{storage_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"storage_id"}}`, encodeURIComponent(String(requestParameters['storageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove storage from vault
     */
    async deleteProjectStorage(workspaceId: string, projectId: string, storageId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectStorageRaw({ workspaceId: workspaceId, projectId: projectId, storageId: storageId }, initOverrides);
    }

    /**
     * Get vault by ID
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getProject().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get vault by ID
     */
    async getProject(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.getProjectRaw({ workspaceId: workspaceId, projectId: projectId }, initOverrides);
        return await response.value();
    }

    /**
     * Get vault encryption key
     */
    async getProjectKeyRaw(requestParameters: GetProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getProjectKey().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/key`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientEncryptionKeyResponseFromJSON(jsonValue));
    }

    /**
     * Get vault encryption key
     */
    async getProjectKey(workspaceId: string, projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse | null | undefined > {
        const response = await this.getProjectKeyRaw({ workspaceId: workspaceId, projectId: projectId }, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * List vault signals
     */
    async listProjectSignalsRaw(requestParameters: ListProjectSignalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listProjectSignals().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listProjectSignals().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/signals`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalListResponseFromJSON(jsonValue));
    }

    /**
     * List vault signals
     */
    async listProjectSignals(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalListResponse> {
        const response = await this.listProjectSignalsRaw({ workspaceId: workspaceId, projectId: projectId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * List vault storages
     */
    async listProjectStoragesRaw(requestParameters: ListProjectStoragesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listProjectStorages().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listProjectStorages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/storages`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageListResponseFromJSON(jsonValue));
    }

    /**
     * List vault storages
     */
    async listProjectStorages(workspaceId: string, projectId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageListResponse> {
        const response = await this.listProjectStoragesRaw({ workspaceId: workspaceId, projectId: projectId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * List vaults
     */
    async listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectListResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling listProjects().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectListResponseFromJSON(jsonValue));
    }

    /**
     * List vaults
     */
    async listProjects(workspaceId: string, page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectListResponse> {
        const response = await this.listProjectsRaw({ workspaceId: workspaceId, page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Set vault encryption key
     */
    async setProjectKeyRaw(requestParameters: SetProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientEncryptionKeyResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling setProjectKey().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling setProjectKey().'
            );
        }

        if (requestParameters['setProjectEncryptionKey'] == null) {
            throw new runtime.RequiredError(
                'setProjectEncryptionKey',
                'Required parameter "setProjectEncryptionKey" was null or undefined when calling setProjectKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}/key`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetProjectEncryptionKeyToJSON(requestParameters['setProjectEncryptionKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientEncryptionKeyResponseFromJSON(jsonValue));
    }

    /**
     * Set vault encryption key
     */
    async setProjectKey(workspaceId: string, projectId: string, setProjectEncryptionKey: SetProjectEncryptionKey, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientEncryptionKeyResponse> {
        const response = await this.setProjectKeyRaw({ workspaceId: workspaceId, projectId: projectId, setProjectEncryptionKey: setProjectEncryptionKey }, initOverrides);
        return await response.value();
    }

    /**
     * Update vault
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateProject().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateProject().'
            );
        }

        if (requestParameters['updateProject'] == null) {
            throw new runtime.RequiredError(
                'updateProject',
                'Required parameter "updateProject" was null or undefined when calling updateProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/workspaces/{workspace_id}/projects/{project_id}`;
        urlPath = urlPath.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId'])));
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectToJSON(requestParameters['updateProject']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * Update vault
     */
    async updateProject(workspaceId: string, projectId: string, updateProject: UpdateProject, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.updateProjectRaw({ workspaceId: workspaceId, projectId: projectId, updateProject: updateProject }, initOverrides);
        return await response.value();
    }

}
